// ------------------------------------------------------------------------------------------------
// 本篇須知：
//
// * 假設已具備了 C 語言的背景知識，因為道理都相同，所以許多東西的細節不會再提。例如 "let i = 1 + 2"
//
// * 一元運算子使用在一個對象上。其中，可以使用前綴語法如 !b 或是後綴語法如 i++.
//
// * 二元運算子使用在兩個對象上，因為使用在兩個值中間，因此它們是中綴語法，例如 a + b
//
// * 三元運算子使用在三個對象上，只有一種三元運算子的使用方式：a ? b : c
// ------------------------------------------------------------------------------------------------

// 一開始是標準的賦值運算子 (=)。在 Swift 中需留意的，是這個賦值的行為並不會回傳一個值，因此像這種表達式
// "if (x = y) {}" 是沒有作用的，這個方式避免了在條件語句中的意外賦值
var a = 10.0
var b = 3.0

// 可以一次賦值多個對象(使用在元組上)
let (x, y) = (5, 6)
x
y

// 撇開標準的數學運算符不談，另外還有不會搞混的取餘運算子(%)，與 C 語言方式不太相同，因為餘數可以從負數跟浮點數中求得
var c = a / b // 浮點數的計算結果
var d = a % b // 浮點數的餘數

// ------------------------------------------------------------------------------------------------
// 範圍運算子
//
// 使用兩個點加上一個小於符號 ..< 的範圍運算子表示包含起始值，但不包含結尾值
//
// 這個稱為 "半封閉的範圍運算子"
for i in 1..<10
{
	i // 從 1 印到 9
}

// 使用三個點 ... 的範圍運算子表示包含起始值，而且包含結尾值
//
// 這個稱為 "封閉的範圍運算子"
for i in 1...10
{
	i // 從 1 印到 10
}

// ------------------------------------------------------------------------------------------------
// 一元、二元以及三元運算子
//
// 一元前綴運算子出現在目標對象的前面，這裡我們將目標對象加 1 後再轉為負數：
++a
a = -a

// 你也可以如此使用一元運算子中的 + 運算子，雖然這麼做一點用也沒有
a = +a

// 使用複合運算子來對變數增加 10 後再賦值
a += 10

// 邏輯 '非'
var truefalse = true
truefalse = !truefalse

// 一元後綴運算子出現在目標對象的後面：i++
a--
a

// 二元運算子是中綴的，因為它們出現在兩個目標對象的中間
a + b

// 使用 + 運算子來連結字串
"hello, " + "world"

// 將字元轉為字串後，也可以透過 + 運算子來連結它們
let dog: Character = "🐶"
let cow: Character = "🐮"
let dogCow = String(dog) + String(cow)

// 三元運算子使用在三個對象上
truefalse ? a : b

// ------------------------------------------------------------------------------------------------
// 比較運算子
//
// 可以使用 === 來測試兩個物件參照的對象相不相同(而不是測試兩個物件相不相同)
class myclass {}
var c1 = myclass()
var c2 = myclass()
c1 === c2
c1 === c1

// 比較字串的大小寫相不相同
"abc" == "abc"
"abc" == "ABC"

// ------------------------------------------------------------------------------------------------
// 邏輯運算子
//
// 使用 &&、|| 以及 ! 這些邏輯運算字來做比較
if (true && false) || !(false && true)
{
	"true"
}
